// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model clients {
  id         BigInt   @id @default(autoincrement())
  name       String   @db.VarChar(100)
  code       String   @unique @db.VarChar(50)
  created_by String   @db.VarChar(100)
  created_at DateTime @default(now())

  physical_locations physical_locations[]
  items              items[]
  stock_cards        stock_cards[]
}

model physical_locations {
  id         BigInt   @id @default(autoincrement())
  client_id  BigInt
  name       String   @db.VarChar(100)
  location   String?  @db.VarChar(200)
  created_by String   @db.VarChar(100)
  created_at DateTime @default(now())
  is_active  Boolean  @default(false)

  client      clients       @relation(fields: [client_id], references: [id])
  stock_cards stock_cards[]
}

model units {
  id          BigInt   @id @default(autoincrement())
  code        String   @unique @db.VarChar(20)
  name        String   @unique @db.VarChar(50)
  description String?
  created_by  String   @db.VarChar(100)
  created_at  DateTime @default(now())

  items       items[]
  stock_cards stock_cards[]
}

model items {
  id           BigInt   @id @default(autoincrement())
  number       String   @default("DRAFT") @db.VarChar(100)
  client_id    BigInt
  name         String   @db.VarChar(100)
  unit_id      BigInt
  unit_code    String   @db.VarChar(20)
  unit_name    String   @db.VarChar(50)
  document_url String?
  description  String?
  price        Decimal? @db.Decimal(12, 2) // NEW FIELD
  created_by   String   @db.VarChar(100)
  created_at   DateTime @default(now())
  is_active    Boolean  @default(false)

  client      clients       @relation(fields: [client_id], references: [id])
  unit        units         @relation(fields: [unit_id], references: [id])
  stock_cards stock_cards[]

  @@unique([client_id, number])
}

model stock_cards {
  id                         BigInt       @id @default(autoincrement())
  number                     String       @default("DRAFT") @db.VarChar(100)
  client_id                  BigInt
  physical_location_id       BigInt
  physical_location_name     String       @db.VarChar(100)
  physical_location_location String       @db.VarChar(200)
  item_id                    BigInt
  item_number                String       @default("DRAFT") @db.VarChar(100)
  item_document_url          String?
  item_name                  String       @db.VarChar(100)
  item_description           String?
  item_price                 Decimal?     @db.Decimal(12, 2)
  unit_id                    BigInt
  unit_code                  String       @db.VarChar(20)
  unit_name                  String       @db.VarChar(50)
  type                       stock_type
  reference_no               String?      @db.VarChar(50)
  quantity                   Int
  total_price                Decimal?     @db.Decimal(12, 2)
  note                       String?
  status                     stock_status @default(DRAFT)
  created_by                 String       @db.VarChar(100)
  created_at                 DateTime     @default(now())
  posted_by                  String?      @db.VarChar(100)
  posted_at                  DateTime?

  client            clients            @relation(fields: [client_id], references: [id])
  physical_location physical_locations @relation(fields: [physical_location_id], references: [id])
  item              items              @relation(fields: [item_id], references: [id])
  unit              units              @relation(fields: [unit_id], references: [id])

  @@index([item_name, physical_location_name, client_id], name: "idx_stock_cards_item_loc_date")
  @@index([created_at], name: "idx_stock_cards_date")
}

enum stock_type {
  IN
  OUT
  ADJUSTMENT
}

enum stock_status {
  DRAFT
  POSTED
}

model audit_logs {
  id         BigInt       @id @default(autoincrement())
  table_name String       @db.VarChar(100)
  record_id  BigInt
  action     audit_action
  old_data   Json?
  new_data   Json?
  changed_by String       @db.VarChar(100)
  changed_at DateTime     @default(now())
}

enum audit_action {
  INSERT
  UPDATE
  DELETE
}
